/**
 * This module was automatically generated by `ts-interface-builder`
 */
import * as t from "ts-interface-checker";
// tslint:disable:object-literal-key-quotes

export const SearchOptions = t.iface([], {
  "search": "string",
  "page": "number",
  "mode": t.union(t.lit("popular"), t.lit("recent")),
  "tags": t.array("string"),
});

export const Stat = t.union(t.lit("str"), t.lit("dex"), t.lit("con"), t.lit("int"), t.lit("cha"), t.lit("wis"));

export const Statblock = t.iface([], {
  "description": "Description",
  "core": "Core",
  "abilities": "Abilities",
  "defenses": "Defenses",
  "features": "Features",
  "spellcasting": "SpellCasting",
  "misc": "Misc",
});

export const Misc = t.iface([], {
  "legActionsPerRound": "number",
  "telepathy": "number",
  "passivePerceptionOverride": t.union("number", "null"),
  "featureHeaderTexts": "FeatureHeaderTexts",
});

export const FeatureHeaderTexts = t.iface([], {
  "features": "string",
  "actions": "string",
  "bonus": "string",
  "reactions": "string",
  "legendary": "string",
  "lair": "string",
  "mythic": "string",
  "regional": "string",
});

export const Description = t.iface([], {
  "name": "string",
  "isProperNoun": "boolean",
  "description": "string",
  "image": "string",
  "faction": "string",
  "environment": "string",
  "alignment": "string",
  "cr": "number",
  "xp": "number",
});

export const Core = t.iface([], {
  "proficiencyBonus": "number",
  "race": "string",
  "size": "string",
  "speed": t.array("SpeedEntity"),
  "senses": t.array("SenseEntity"),
  "languages": t.union(t.array("string"), "null"),
});

export const Speed = t.iface([], {
  "walk": "number",
  "fly": "number",
  "isHover": "boolean",
  "burrow": "number",
  "swim": "number",
  "climb": "number",
});

export const Unit = t.union(t.lit("ft"), t.lit("m"), t.lit("km"), t.lit("mi"), t.lit("none"));

export const SpeedEntity = t.iface([], {
  "name": "string",
  "value": "number",
  "unit": "Unit",
  "comment": "string",
});

export const SenseEntity = t.iface([], {
  "name": "string",
  "value": "number",
  "unit": "Unit",
  "comment": "string",
});

export const Abilities = t.iface([], {
  "stats": "Stats",
  "saves": "Saves",
  "skills": t.array("SkillsEntity"),
});

export const Stats = t.iface([], {
  "str": "number",
  "dex": "number",
  "con": "number",
  "int": "number",
  "cha": "number",
  "wis": "number",
});

export const Saves = t.iface([], {
  "str": "SaveEntity",
  "dex": "SaveEntity",
  "con": "SaveEntity",
  "int": "SaveEntity",
  "cha": "SaveEntity",
  "wis": "SaveEntity",
});

export const SaveEntity = t.iface([], {
  "isProficient": "boolean",
  "override": t.union("number", "null"),
});

export const SkillsEntity = t.iface([], {
  "skillName": "string",
  "isHalfProficient": "boolean",
  "isProficient": "boolean",
  "isExpertise": "boolean",
  "override": t.union("number", "null"),
});

export const Defenses = t.iface([], {
  "hp": "Hp",
  "ac": "Ac",
  "vulnerabilities": t.array("string"),
  "resistances": t.array("string"),
  "immunities": t.array("string"),
  "conditionImmunities": t.array("string"),
});

export const Hp = t.iface([], {
  "numOfHitDie": "number",
  "sizeOfHitDie": "number",
  "override": t.union("number", "null"),
});

export const Ac = t.iface([], {
  "ac": "number",
  "acSource": "string",
});

export const Features = t.iface([], {
  "features": t.array("FeatureEntity"),
  "actions": t.array("FeatureEntity"),
  "bonus": t.array("FeatureEntity"),
  "reactions": t.array("FeatureEntity"),
  "legendary": t.array("FeatureEntity"),
  "mythic": t.array("FeatureEntity"),
  "lair": t.array("FeatureEntity"),
  "regional": t.array("FeatureEntity"),
});

export const FeatureEntity = t.iface([], {
  "name": "string",
  "description": "string",
  "automation": t.union("null", "object", t.array("object")),
});

export const SpellCasting = t.iface([], {
  "innateSpells": "InnateSpells",
  "casterSpells": "CasterSpells",
});

export const InnateSpells = t.iface([], {
  "spellList": "InnateSpellsList",
  "spellDcOverride": t.union("null", "number"),
  "spellBonusOverride": t.union("null", "number"),
  "spellCastingAbility": t.union("Stat", "null"),
  "noComponentsOfType": t.array("string"),
  "isPsionics": "boolean",
  "displayAsAction": "boolean",
});

export const CasterSpells = t.iface([], {
  "casterLevel": t.union("number", "null"),
  "castingClass": t.union(t.lit("Wizard"), t.lit("Druid"), t.lit("Cleric"), t.lit("Bard"), t.lit("Sorcerer"), t.lit("Paladin"), t.lit("Ranger"), t.lit("Artificer"), t.lit("Warlock"), "null"),
  "spellList": t.array(t.array("string")),
  "spellSlotList": t.union("SpellSlotEntity", "undefined"),
  "spellDcOverride": t.union("null", "number"),
  "spellBonusOverride": t.union("null", "number"),
  "spellCastingAbility": t.union("Stat", "null"),
  "spellCastingAbilityOverride": t.union("Stat", "null"),
  "displayAsAction": "boolean",
});

export const InnateSpellsList = t.iface([], {
  [t.indexKey]: t.array("InnateSpellsEntity"),
});

export const InnateSpellsEntity = t.iface([], {
  "spell": "string",
  "comment": "string",
});

export const SpellSlotEntity = t.iface([], {
  [t.indexKey]: "number",
});

const exportedTypeSuite: t.ITypeSuite = {
  SearchOptions,
  Stat,
  Statblock,
  Misc,
  FeatureHeaderTexts,
  Description,
  Core,
  Speed,
  Unit,
  SpeedEntity,
  SenseEntity,
  Abilities,
  Stats,
  Saves,
  SaveEntity,
  SkillsEntity,
  Defenses,
  Hp,
  Ac,
  Features,
  FeatureEntity,
  SpellCasting,
  InnateSpells,
  CasterSpells,
  InnateSpellsList,
  InnateSpellsEntity,
  SpellSlotEntity,
};
export default exportedTypeSuite;
